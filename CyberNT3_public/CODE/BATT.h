/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : BATT.H
**     Project   : CyberNT3
**     Processor : 56F8366
**     Component : ADC
**     Version   : Component 01.580, Driver 02.05, CPU db: 2.87.042
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 2011/8/20, 22:03
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : ADCA_ADCR1  [61952]
**         AD control register         : ADCA_ADCR2  [61953]
**         AD control register         : ADCA_ADZCC  [61954]
**         AD control register         : ADCA_ADLST1 [61955]
**         AD control register         : ADCA_ADLST2 [61956]
**         AD control register         : ADCA_ADSDIS [61957]
**         AD control register         : ADCA_ADSTAT [61958]
**         AD control register         : ADCA_ADLSTAT [61959]
**         AD control register         : ADCA_ADZCSTAT [61960]
**         AD control register         : ADCA_ADLLMT0 [61969]
**         AD control register         : ADCA_ADLLMT1 [61970]
**         AD control register         : ADCA_ADLLMT2 [61971]
**         AD control register         : ADCA_ADLLMT3 [61972]
**         AD control register         : ADCA_ADLLMT4 [61973]
**         AD control register         : ADCA_ADLLMT5 [61974]
**         AD control register         : ADCA_ADLLMT6 [61975]
**         AD control register         : ADCA_ADLLMT7 [61976]
**         AD control register         : ADCA_ADHLMT0 [61977]
**         AD control register         : ADCA_ADHLMT1 [61978]
**         AD control register         : ADCA_ADHLMT2 [61979]
**         AD control register         : ADCA_ADHLMT3 [61980]
**         AD control register         : ADCA_ADHLMT4 [61981]
**         AD control register         : ADCA_ADHLMT5 [61982]
**         AD control register         : ADCA_ADHLMT6 [61983]
**         AD control register         : ADCA_ADHLMT7 [61984]
**         AD control register         : ADCA_ADOFS0 [61985]
**         AD control register         : ADCA_ADOFS1 [61986]
**         AD control register         : ADCA_ADOFS2 [61987]
**         AD control register         : ADCA_ADOFS3 [61988]
**         AD control register         : ADCA_ADOFS4 [61989]
**         AD control register         : ADCA_ADOFS5 [61990]
**         AD control register         : ADCA_ADOFS6 [61991]
**         AD control register         : ADCA_ADOFS7 [61992]
**         AD control register         : ADCA_ADPOWER [61993]
**         AD control register         : ADCA_CAL    [61994]
**         User handling procedure     : not specified
**         Number of conversions       : 1
**         AD resolution               : 12-bit
**
**         Input pins
**
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-62
**     Contents  :
**         Measure    - byte BATT_Measure(bool WaitForResult);
**         GetValue16 - byte BATT_GetValue16(word *Values);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

/* MODULE BATT. */

#ifndef __BATT
#define __BATT

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"

/* MODULE BATT. */



byte BATT_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  BATT_Measure (component ADC)
**
**     Description :
**         This method performs one measurement on all channels that
**         are set in the bean inspector. (Note: If the <number of
**         conversions> is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of a
**                           conversion. If <interrupt service> is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the <number of channel> is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the <interrupt
**                           service> is disabled and a <number of
**                           conversions> is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/

byte BATT_GetValue16(word *Values);
/*
** ===================================================================
**     Method      :  BATT_GetValue16 (component ADC)
**
**     Description :
**         This method returns the last measured values of all channels
**         justified to the left. Compared with <GetValue> method this
**         method returns more accurate result if the <number of
**         conversions> is greater than 1 and <AD resolution> is less
**         than 16 bits. In addition, the user code dependency on <AD
**         resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that contains
**                           the measured data.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

void BATT_Init(void);
/*
** ===================================================================
**     Method      :  BATT_Init (component ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END BATT. */

#endif /* ifndef __BATT */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
