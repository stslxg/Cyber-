/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : PID.H
**     Project   : CyberNT3
**     Processor : 56F8366
**     Component : MC_PIController
**     Version   : Component 01.018, Driver 01.03, CPU db: 2.87.042
**     Compiler  : Metrowerks DSP C Compiler
**     Date/Time : 2011/8/20, 22:03
**     Abstract  :
**          This bean encapsulate the API for standard controllers (e.g., PI and PID)
**          for use in motor control applications in general.
**     Settings  :
**          This bean has no settings.
**     Contents  :
**         controllerPItype1  - Word16 PID_controllerPItype1(Word16 DesiredValue, Word16 MeasuredValue,...
**         controllerPIDtype1 - Word16 PID_controllerPIDtype1(Word16 DesiredValue, Word16 MeasuredValue,...
**
**     (c) Freescale Semiconductor
**     2004 All Rights Reserved
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __PID
#define __PID

/* MODULE PID. */

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PE_Timer.h"
/* Include inherited beans */

#include "Cpu.h"


typedef struct
{
    Frac16 ProportionalGain;
    /* The scaled gain of the proportional controller portion */
    Frac16 IntegralGain;
    /* The scaled gain of the integral controller portion */
    Frac32 IntegralPortionK_1;
    /* The integral portion in k-1 step */
    Frac16 PositivePILimit;
    /* The limitation of the positive controller output
       and the integral portion */
    Frac16 NegativePILimit;
    /* The limitation of the negative controller output
       and the integral portion */
    Word16 ProportionalGainScale;
    /* Scaling coefficient of the proportional controller portion  */
    Word16 IntegralGainScale;
    /* Scaling coefficient of the integral controller portion */
}mc_sPIparams1_limitSc;                /* General types, primary used in PI and other controllers. */

#define controllerPIDtype1(DesiredValue, MeasuredValue, pParams) PID_controllerPIDtype1(DesiredValue, MeasuredValue, pParams)
Word16 PID_controllerPIDtype1(Word16 DesiredValue,Word16 MeasuredValue,mc_sPIDparams *pParams);
/*
** ===================================================================
**     Method      :  PID_controllerPIDtype1 (component MC_PIController)
**
**     Description :
**         This function calculates the PID
**         (Proportional-Integral-Derivative) algorithm.
**     Parameters  :
**         NAME            - DESCRIPTION
**         DesiredValue    - Desired value.
**         MeasuredValue   - Measured value.
**       * pParams         - Pointer to variable containing
**                           controller parameters, the integral
**                           portion in k-1 step and the iput error
**                           in step k-1.
**     Returns     :
**         ---             - This function returns the value
**                           representing the controller output in
**                           step k. The output value is limited by
**                           using PositivePIDLimit and
**                           NegativePIDLimit values.
** ===================================================================
*/

#define controllerPItype1(DesiredValue, MeasuredValue, pParams) PID_controllerPItype1(DesiredValue, MeasuredValue, pParams)
Word16 PID_controllerPItype1(Word16 DesiredValue,Word16 MeasuredValue,mc_sPIparams *pParams);
/*
** ===================================================================
**     Method      :  PID_controllerPItype1 (component MC_PIController)
**
**     Description :
**         This function calculates the PI (Proportional-Integral)
**         algorithm.
**     Parameters  :
**         NAME            - DESCRIPTION
**         DesiredValue    - Desired value.
**         MeasuredValue   - Measured value.
**       * pParams         - Pointer to variable containing
**                           controller parameters and the integral
**                           portion in k-1 step.
**     Returns     :
**         ---             - This function returns the value
**                           representing the controller output in
**                           step k. The output value is limited by
**                           using PositivePILimit and
**                           NegativePILimit values.
** ===================================================================
*/

/* END PID. */

#endif /* ifndef __PID */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.00 [04.35]
**     for the Freescale 56800 series of microcontrollers.
**
** ###################################################################
*/
